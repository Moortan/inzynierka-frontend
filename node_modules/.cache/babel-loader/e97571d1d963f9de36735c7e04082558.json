{"ast":null,"code":"import { verifyTokenStarted, verifyUserSuccess, verifyTokenEnd, userLoginStarted, userLoginFailure, userLogout, userSignupStarted, userSignupFailure, userSignupSuccess } from \"../actions/authActions\";\nimport { verifyTokenService, userLoginService, userLogoutService, userSignupService } from '../services/auth'; //handle verify token\n\nexport const verifyTokenAsync = (silentAuth = false) => async dispatch => {\n  dispatch(verifyTokenStarted(silentAuth));\n  const result = await verifyTokenService();\n\n  if (result.error) {\n    dispatch(verifyTokenEnd());\n    if (result.response && [401, 403].includes(result.response.status)) dispatch(userLogout());\n    return;\n  }\n\n  if (result.status === 204) dispatch(verifyTokenEnd());else {\n    dispatch(verifyUserSuccess(result.data));\n  }\n}; // handle user login\n\nexport const userLoginAsync = (username, password) => async dispatch => {\n  dispatch(userLoginStarted());\n  const result = await userLoginService(username, password);\n\n  if (result.error) {\n    dispatch(userLoginFailure(result.response.data));\n    return;\n  }\n\n  dispatch(verifyUserSuccess(result.data));\n}; // handle user logout\n\nexport const userLogoutAsync = () => dispatch => {\n  dispatch(userLogout());\n  userLogoutService();\n}; //handle user signup\n\nexport const userSignupAsync = (email, username, password) => async dispatch => {\n  dispatch(userSignupStarted());\n  const result = await userSignupService(email, username, password);\n\n  if (result.error) {\n    console.log(result.response);\n    dispatch(userSignupFailure(result.response.data.data.message));\n    return;\n  }\n\n  dispatch(userSignupSuccess());\n};","map":{"version":3,"sources":["/Users/sleniart/projects/react-front/src/asyncActions/authAsyncActions.js"],"names":["verifyTokenStarted","verifyUserSuccess","verifyTokenEnd","userLoginStarted","userLoginFailure","userLogout","userSignupStarted","userSignupFailure","userSignupSuccess","verifyTokenService","userLoginService","userLogoutService","userSignupService","verifyTokenAsync","silentAuth","dispatch","result","error","response","includes","status","data","userLoginAsync","username","password","userLogoutAsync","userSignupAsync","email","console","log","message"],"mappings":"AAAA,SACIA,kBADJ,EACwBC,iBADxB,EAC2CC,cAD3C,EAEIC,gBAFJ,EAEsBC,gBAFtB,EAEwCC,UAFxC,EAEoDC,iBAFpD,EAEuEC,iBAFvE,EAE0FC,iBAF1F,QAGO,wBAHP;AAIA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,iBAA/C,EAAkEC,iBAAlE,QAA2F,kBAA3F,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,UAAU,GAAG,KAAd,KAAwB,MAAMC,QAAN,IAAkB;AACtEA,EAAAA,QAAQ,CAACf,kBAAkB,CAACc,UAAD,CAAnB,CAAR;AAEA,QAAME,MAAM,GAAG,MAAMP,kBAAkB,EAAvC;;AAEA,MAAIO,MAAM,CAACC,KAAX,EAAkB;AACdF,IAAAA,QAAQ,CAACb,cAAc,EAAf,CAAR;AACA,QAAIc,MAAM,CAACE,QAAP,IAAmB,CAAC,GAAD,EAAM,GAAN,EAAWC,QAAX,CAAoBH,MAAM,CAACE,QAAP,CAAgBE,MAApC,CAAvB,EACIL,QAAQ,CAACV,UAAU,EAAX,CAAR;AACJ;AACH;;AAED,MAAIW,MAAM,CAACI,MAAP,KAAkB,GAAtB,EACIL,QAAQ,CAACb,cAAc,EAAf,CAAR,CADJ,KAEK;AACDa,IAAAA,QAAQ,CAACd,iBAAiB,CAACe,MAAM,CAACK,IAAR,CAAlB,CAAR;AACH;AACJ,CAjBM,C,CAmBP;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB,MAAMT,QAAN,IAAkB;AACpEA,EAAAA,QAAQ,CAACZ,gBAAgB,EAAjB,CAAR;AAEA,QAAMa,MAAM,GAAG,MAAMN,gBAAgB,CAACa,QAAD,EAAWC,QAAX,CAArC;;AAEA,MAAIR,MAAM,CAACC,KAAX,EAAkB;AACdF,IAAAA,QAAQ,CAACX,gBAAgB,CAACY,MAAM,CAACE,QAAP,CAAgBG,IAAjB,CAAjB,CAAR;AACA;AACH;;AAEDN,EAAAA,QAAQ,CAACd,iBAAiB,CAACe,MAAM,CAACK,IAAR,CAAlB,CAAR;AACH,CAXM,C,CAaP;;AACA,OAAO,MAAMI,eAAe,GAAG,MAAMV,QAAQ,IAAI;AAC7CA,EAAAA,QAAQ,CAACV,UAAU,EAAX,CAAR;AACAM,EAAAA,iBAAiB;AACpB,CAHM,C,CAKP;;AACA,OAAO,MAAMe,eAAe,GAAG,CAACC,KAAD,EAAQJ,QAAR,EAAkBC,QAAlB,KAA+B,MAAMT,QAAN,IAAkB;AAC5EA,EAAAA,QAAQ,CAACT,iBAAiB,EAAlB,CAAR;AAEA,QAAMU,MAAM,GAAG,MAAMJ,iBAAiB,CAACe,KAAD,EAAQJ,QAAR,EAAkBC,QAAlB,CAAtC;;AAEA,MAAGR,MAAM,CAACC,KAAV,EAAiB;AACbW,IAAAA,OAAO,CAACC,GAAR,CAAYb,MAAM,CAACE,QAAnB;AACAH,IAAAA,QAAQ,CAACR,iBAAiB,CAACS,MAAM,CAACE,QAAP,CAAgBG,IAAhB,CAAqBA,IAArB,CAA0BS,OAA3B,CAAlB,CAAR;AACA;AACH;;AAEDf,EAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACH,CAZM","sourcesContent":["import {\n    verifyTokenStarted, verifyUserSuccess, verifyTokenEnd,\n    userLoginStarted, userLoginFailure, userLogout, userSignupStarted, userSignupFailure, userSignupSuccess\n} from \"../actions/authActions\";\nimport { verifyTokenService, userLoginService, userLogoutService, userSignupService } from '../services/auth';\n\n//handle verify token\nexport const verifyTokenAsync = (silentAuth = false) => async dispatch => {\n    dispatch(verifyTokenStarted(silentAuth));\n\n    const result = await verifyTokenService();\n\n    if (result.error) {\n        dispatch(verifyTokenEnd());\n        if (result.response && [401, 403].includes(result.response.status))\n            dispatch(userLogout());\n        return;\n    }\n\n    if (result.status === 204)\n        dispatch(verifyTokenEnd());\n    else {\n        dispatch(verifyUserSuccess(result.data));\n    }\n}\n\n// handle user login\nexport const userLoginAsync = (username, password) => async dispatch => {\n    dispatch(userLoginStarted());\n\n    const result = await userLoginService(username, password);\n\n    if (result.error) {\n        dispatch(userLoginFailure(result.response.data));\n        return;\n    }\n\n    dispatch(verifyUserSuccess(result.data));\n}\n\n// handle user logout\nexport const userLogoutAsync = () => dispatch => {\n    dispatch(userLogout());\n    userLogoutService();\n}\n\n//handle user signup\nexport const userSignupAsync = (email, username, password) => async dispatch => {\n    dispatch(userSignupStarted());\n\n    const result = await userSignupService(email, username, password);\n\n    if(result.error) {\n        console.log(result.response)\n        dispatch(userSignupFailure(result.response.data.data.message));\n        return;\n    }\n\n    dispatch(userSignupSuccess());\n}\n\n"]},"metadata":{},"sourceType":"module"}