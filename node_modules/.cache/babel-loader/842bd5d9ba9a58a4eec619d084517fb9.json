{"ast":null,"code":"import { VERIFY_TOKEN_STARTED, VERIFY_TOKEN_END, USER_LOGIN_STARTED, USER_LOGIN_FAILURE, VERIFY_USER_SUCCESS, USER_LOGOUT } from \"../actions/actionTypes\"; // define initial state of auth reducer\n\nconst initialState = {\n  token: null,\n  // manage the access token\n  expiredAt: null,\n  // manage expiry time of the access token\n  user: null,\n  // manage the user details\n  authLoading: true,\n  // to indicate that the auth API is in progress\n  isAuthenticated: false,\n  // consider as a authentication flag\n  userLoginLoading: false,\n  // to indicate that the user signin API is in progress\n  loginError: null // manage the error of the user signin API\n\n}; // update store based on type and payload and return the state\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    // verify token - started\n    case VERIFY_TOKEN_STARTED:\n      const {\n        silentAuth\n      } = action.payload;\n      return silentAuth ? { ...state\n      } : initialState;\n    // verify token - ended/failed\n\n    case VERIFY_TOKEN_END:\n      return { ...state,\n        authLoading: false\n      };\n    // user login - started\n\n    case USER_LOGIN_STARTED:\n      return { ...state,\n        userLoginLoading: true\n      };\n    // user login - ended/failed\n\n    case USER_LOGIN_FAILURE:\n      const {\n        error\n      } = action.payload;\n      return { ...state,\n        loginError: error,\n        userLoginLoading: false\n      };\n    // verify token - success\n\n    case VERIFY_USER_SUCCESS:\n      const {\n        token,\n        expiredAt,\n        user\n      } = action.payload;\n      return { ...state,\n        token,\n        expiredAt,\n        user,\n        isAuthenticated: true,\n        authLoading: false,\n        userLoginLoading: false\n      };\n    // handle user logout\n\n    case USER_LOGOUT:\n      return { ...initialState,\n        authLoading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;","map":{"version":3,"sources":["/Users/sleniart/projects/react-front/src/reducers/authReducer.js"],"names":["VERIFY_TOKEN_STARTED","VERIFY_TOKEN_END","USER_LOGIN_STARTED","USER_LOGIN_FAILURE","VERIFY_USER_SUCCESS","USER_LOGOUT","initialState","token","expiredAt","user","authLoading","isAuthenticated","userLoginLoading","loginError","auth","state","action","type","silentAuth","payload","error"],"mappings":"AAAA,SACIA,oBADJ,EAC0BC,gBAD1B,EAEIC,kBAFJ,EAEwBC,kBAFxB,EAGIC,mBAHJ,EAGyBC,WAHzB,QAIS,wBAJT,C,CAME;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AACN;AACbC,EAAAA,SAAS,EAAE,IAFQ;AAEF;AACjBC,EAAAA,IAAI,EAAE,IAHa;AAGP;AACZC,EAAAA,WAAW,EAAE,IAJM;AAIA;AACnBC,EAAAA,eAAe,EAAE,KALE;AAKK;AACxBC,EAAAA,gBAAgB,EAAE,KANC;AAMM;AACzBC,EAAAA,UAAU,EAAE,IAPO,CAOF;;AAPE,CAArB,C,CAUA;;AACA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKjB,oBAAL;AACE,YAAM;AAAEkB,QAAAA;AAAF,UAAiBF,MAAM,CAACG,OAA9B;AACA,aAAOD,UAAU,GAAG,EAClB,GAAGH;AADe,OAAH,GAEbT,YAFJ;AAGF;;AACA,SAAKL,gBAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELL,QAAAA,WAAW,EAAE;AAFR,OAAP;AAIF;;AACA,SAAKR,kBAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELH,QAAAA,gBAAgB,EAAE;AAFb,OAAP;AAIF;;AACA,SAAKT,kBAAL;AACE,YAAM;AAAEiB,QAAAA;AAAF,UAAYJ,MAAM,CAACG,OAAzB;AACA,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,UAAU,EAAEO,KAFP;AAGLR,QAAAA,gBAAgB,EAAE;AAHb,OAAP;AAKF;;AACA,SAAKR,mBAAL;AACE,YAAM;AAAEG,QAAAA,KAAF;AAASC,QAAAA,SAAT;AAAoBC,QAAAA;AAApB,UAA6BO,MAAM,CAACG,OAA1C;AACA,aAAO,EACL,GAAGJ,KADE;AAELR,QAAAA,KAFK;AAGLC,QAAAA,SAHK;AAILC,QAAAA,IAJK;AAKLE,QAAAA,eAAe,EAAE,IALZ;AAMLD,QAAAA,WAAW,EAAE,KANR;AAOLE,QAAAA,gBAAgB,EAAE;AAPb,OAAP;AASF;;AACA,SAAKP,WAAL;AACE,aAAO,EACL,GAAGC,YADE;AAELI,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAIF;AACE,aAAOK,KAAP;AA9CJ;AAgDD,CAjDD;;AAmDA,eAAeD,IAAf","sourcesContent":["import {\n    VERIFY_TOKEN_STARTED, VERIFY_TOKEN_END,\n    USER_LOGIN_STARTED, USER_LOGIN_FAILURE,\n    VERIFY_USER_SUCCESS, USER_LOGOUT\n  } from \"../actions/actionTypes\";\n   \n  // define initial state of auth reducer\n  const initialState = {\n    token: null, // manage the access token\n    expiredAt: null, // manage expiry time of the access token\n    user: null, // manage the user details\n    authLoading: true, // to indicate that the auth API is in progress\n    isAuthenticated: false, // consider as a authentication flag\n    userLoginLoading: false, // to indicate that the user signin API is in progress\n    loginError: null // manage the error of the user signin API\n  }\n   \n  // update store based on type and payload and return the state\n  const auth = (state = initialState, action) => {\n    switch (action.type) {\n      // verify token - started\n      case VERIFY_TOKEN_STARTED:\n        const { silentAuth } = action.payload;\n        return silentAuth ? {\n          ...state\n        } : initialState;\n      // verify token - ended/failed\n      case VERIFY_TOKEN_END:\n        return {\n          ...state,\n          authLoading: false\n        };\n      // user login - started\n      case USER_LOGIN_STARTED:\n        return {\n          ...state,\n          userLoginLoading: true\n        };\n      // user login - ended/failed\n      case USER_LOGIN_FAILURE:\n        const { error } = action.payload;\n        return {\n          ...state,\n          loginError: error,\n          userLoginLoading: false\n        };\n      // verify token - success\n      case VERIFY_USER_SUCCESS:\n        const { token, expiredAt, user } = action.payload;\n        return {\n          ...state,\n          token,\n          expiredAt,\n          user,\n          isAuthenticated: true,\n          authLoading: false,\n          userLoginLoading: false\n        }\n      // handle user logout\n      case USER_LOGOUT:\n        return {\n          ...initialState,\n          authLoading: false\n        }\n      default:\n        return state\n    }\n  }\n   \n  export default auth;"]},"metadata":{},"sourceType":"module"}