{"ast":null,"code":"import axios from 'axios';\nimport PublicRoute from '../Utils/PublicRoute';\naxios.defaults.withCredentials = true;\nconst API_URL = 'http://localhost:4202'; //bind token to the axios\n\nexport const setAuthToken = token => {\n  if (token) {\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}; //verify refresh token to generate new access token\n\nexport const verifyTokenService = async () => {\n  try {\n    return await axios.post(`${API_URL}/verifyTokens`);\n  } catch (err) {\n    return {\n      error: true,\n      response: err.response\n    };\n  }\n}; //login api\n\nexport const userLoginService = async (username, password) => {\n  try {\n    return await axios.post(`${API_URL}/login`, {\n      username,\n      password\n    });\n  } catch (err) {\n    return {\n      error: true,\n      response: err.response\n    };\n  }\n}; //logout api\n\nexport const userLogoutService = async () => {\n  try {\n    return await axios.post(`${API_URL}/logout`);\n  } catch (err) {\n    return {\n      error: err,\n      response: err.response\n    };\n  }\n};","map":{"version":3,"sources":["/Users/sleniart/projects/react-front/src/services/auth.js"],"names":["axios","PublicRoute","defaults","withCredentials","API_URL","setAuthToken","token","headers","common","verifyTokenService","post","err","error","response","userLoginService","username","password","userLogoutService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACAD,KAAK,CAACE,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AAEA,MAAMC,OAAO,GAAG,uBAAhB,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AACjC,MAAIA,KAAJ,EAAW;AACPN,IAAAA,KAAK,CAACE,QAAN,CAAeK,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASF,KAAM,EAAjE;AACH,GAFD,MAEO;AACH,WAAON,KAAK,CAACE,QAAN,CAAeK,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACH;AACJ,CANM,C,CAQP;;AACA,OAAO,MAAMC,kBAAkB,GAAG,YAAW;AACzC,MAAI;AACA,WAAO,MAAMT,KAAK,CAACU,IAAN,CAAY,GAAEN,OAAQ,eAAtB,CAAb;AACH,GAFD,CAEC,OAAOO,GAAP,EAAY;AACT,WAAO;AACHC,MAAAA,KAAK,EAAE,IADJ;AAEHC,MAAAA,QAAQ,EAAEF,GAAG,CAACE;AAFX,KAAP;AAIH;AACJ,CATM,C,CAWP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,OAAMC,QAAN,EAAgBC,QAAhB,KAA6B;AACzD,MAAI;AACA,WAAO,MAAMhB,KAAK,CAACU,IAAN,CAAY,GAAEN,OAAQ,QAAtB,EAA+B;AAACW,MAAAA,QAAD;AAAWC,MAAAA;AAAX,KAA/B,CAAb;AACH,GAFD,CAEE,OAAML,GAAN,EAAW;AACT,WAAO;AACHC,MAAAA,KAAK,EAAE,IADJ;AAEHC,MAAAA,QAAQ,EAAEF,GAAG,CAACE;AAFX,KAAP;AAIH;AACJ,CATM,C,CAWP;;AACA,OAAO,MAAMI,iBAAiB,GAAG,YAAW;AACxC,MAAI;AACA,WAAO,MAAMjB,KAAK,CAACU,IAAN,CAAY,GAAEN,OAAQ,SAAtB,CAAb;AACH,GAFD,CAEE,OAAMO,GAAN,EAAW;AACT,WAAO;AACHC,MAAAA,KAAK,EAAED,GADJ;AAEHE,MAAAA,QAAQ,EAAEF,GAAG,CAACE;AAFX,KAAP;AAIH;AACJ,CATM","sourcesContent":["import axios from 'axios';\nimport PublicRoute from '../Utils/PublicRoute';\naxios.defaults.withCredentials = true;\n\nconst API_URL = 'http://localhost:4202';\n\n//bind token to the axios\nexport const setAuthToken = token => {\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\n//verify refresh token to generate new access token\nexport const verifyTokenService = async() => {\n    try {\n        return await axios.post(`${API_URL}/verifyTokens`);\n    }catch (err) {\n        return {\n            error: true,\n            response: err.response\n        }\n    }\n}\n\n//login api\nexport const userLoginService = async(username, password) => {\n    try {\n        return await axios.post(`${API_URL}/login`, {username, password});\n    } catch(err) {\n        return {\n            error: true,\n            response: err.response\n        }\n    }\n}\n\n//logout api\nexport const userLogoutService = async() => {\n    try {\n        return await axios.post(`${API_URL}/logout`);\n    } catch(err) {\n        return {\n            error: err,\n            response: err.response\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}