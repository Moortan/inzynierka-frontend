{"ast":null,"code":"import { VERIFY_TOKEN_STARTED, VERIFY_TOKEN_END, USER_LOGIN_STARTED, USER_LOGIN_FAILURE, VERIFY_USER_SUCCESS, USER_LOGOUT, USER_SIGNUP_SUCCESS, USER_SIGNUP_STARTED, USER_SIGNUP_FAILURE } from \"../actions/actionTypes\"; // define initial state of auth reducer\n\nconst initialState = {\n  token: null,\n  // manage the access token\n  expiredAt: null,\n  // manage expiry time of the access token\n  user: null,\n  // manage the user details\n  authLoading: true,\n  // to indicate that the auth API is in progress\n  isAuthenticated: false,\n  // consider as a authentication flag\n  userLoginLoading: false,\n  // to indicate that the user signin API is in progress\n  userSignupLoading: false,\n  //to indicate that the user signup API is in progress\n  loginError: null,\n  // manage the error of the user signin API\n  signupError: null,\n  //manage the error of the user signup API \n  signupSuccess: null //manage the scuccess message of the signup\n\n}; // update store based on type and payload and return the state\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    // verify token - started\n    case VERIFY_TOKEN_STARTED:\n      const {\n        silentAuth\n      } = action.payload;\n      return silentAuth ? { ...state\n      } : initialState;\n    // verify token - ended/failed\n\n    case VERIFY_TOKEN_END:\n      return { ...state,\n        authLoading: false\n      };\n    // user login - started\n\n    case USER_LOGIN_STARTED:\n      return { ...state,\n        userLoginLoading: true\n      };\n    // user login - ended/failed\n\n    case USER_LOGIN_FAILURE:\n      const {\n        error\n      } = action.payload;\n      return { ...state,\n        loginError: error,\n        userLoginLoading: false\n      };\n    // verify token - success\n\n    case VERIFY_USER_SUCCESS:\n      const {\n        token,\n        expiredAt,\n        user\n      } = action.payload;\n      return { ...state,\n        token,\n        expiredAt,\n        user,\n        isAuthenticated: true,\n        authLoading: false,\n        userLoginLoading: false\n      };\n    // handle user logout\n\n    case USER_LOGOUT:\n      return { ...initialState,\n        authLoading: false\n      };\n\n    case USER_SIGNUP_STARTED:\n      return { ...state,\n        userSignupLoading: true\n      };\n\n    case USER_SIGNUP_SUCCESS:\n      const {\n        signupSuccess\n      } = action.payload;\n      return { ...state,\n        userSignupLoading: false,\n        signupSuccess: signupSuccess\n      };\n\n    case USER_SIGNUP_FAILURE:\n      const {\n        signupError\n      } = action.payload;\n      return { ...state,\n        userSignupLoading: false,\n        signupError: signupError\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;","map":{"version":3,"sources":["/Users/sleniart/projects/react-front/src/reducers/authReducer.js"],"names":["VERIFY_TOKEN_STARTED","VERIFY_TOKEN_END","USER_LOGIN_STARTED","USER_LOGIN_FAILURE","VERIFY_USER_SUCCESS","USER_LOGOUT","USER_SIGNUP_SUCCESS","USER_SIGNUP_STARTED","USER_SIGNUP_FAILURE","initialState","token","expiredAt","user","authLoading","isAuthenticated","userLoginLoading","userSignupLoading","loginError","signupError","signupSuccess","auth","state","action","type","silentAuth","payload","error"],"mappings":"AAAA,SACIA,oBADJ,EAC0BC,gBAD1B,EAEIC,kBAFJ,EAEwBC,kBAFxB,EAGIC,mBAHJ,EAGyBC,WAHzB,EAGsCC,mBAHtC,EAG2DC,mBAH3D,EAGgFC,mBAHhF,QAIO,wBAJP,C,CAMA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,IADU;AACJ;AACbC,EAAAA,SAAS,EAAE,IAFM;AAEA;AACjBC,EAAAA,IAAI,EAAE,IAHW;AAGL;AACZC,EAAAA,WAAW,EAAE,IAJI;AAIE;AACnBC,EAAAA,eAAe,EAAE,KALA;AAKO;AACxBC,EAAAA,gBAAgB,EAAE,KAND;AAMQ;AACzBC,EAAAA,iBAAiB,EAAE,KAPF;AAOS;AAC1BC,EAAAA,UAAU,EAAE,IARK;AAQC;AAClBC,EAAAA,WAAW,EAAE,IATI;AASE;AACnBC,EAAAA,aAAa,EAAE,IAVE,CAUG;;AAVH,CAArB,C,CAaA;;AACA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKvB,oBAAL;AACI,YAAM;AAAEwB,QAAAA;AAAF,UAAiBF,MAAM,CAACG,OAA9B;AACA,aAAOD,UAAU,GAAG,EAChB,GAAGH;AADa,OAAH,GAEbZ,YAFJ;AAGJ;;AACA,SAAKR,gBAAL;AACI,aAAO,EACH,GAAGoB,KADA;AAEHR,QAAAA,WAAW,EAAE;AAFV,OAAP;AAIJ;;AACA,SAAKX,kBAAL;AACI,aAAO,EACH,GAAGmB,KADA;AAEHN,QAAAA,gBAAgB,EAAE;AAFf,OAAP;AAIJ;;AACA,SAAKZ,kBAAL;AACI,YAAM;AAAEuB,QAAAA;AAAF,UAAYJ,MAAM,CAACG,OAAzB;AACA,aAAO,EACH,GAAGJ,KADA;AAEHJ,QAAAA,UAAU,EAAES,KAFT;AAGHX,QAAAA,gBAAgB,EAAE;AAHf,OAAP;AAKJ;;AACA,SAAKX,mBAAL;AACI,YAAM;AAAEM,QAAAA,KAAF;AAASC,QAAAA,SAAT;AAAoBC,QAAAA;AAApB,UAA6BU,MAAM,CAACG,OAA1C;AACA,aAAO,EACH,GAAGJ,KADA;AAEHX,QAAAA,KAFG;AAGHC,QAAAA,SAHG;AAIHC,QAAAA,IAJG;AAKHE,QAAAA,eAAe,EAAE,IALd;AAMHD,QAAAA,WAAW,EAAE,KANV;AAOHE,QAAAA,gBAAgB,EAAE;AAPf,OAAP;AASJ;;AACA,SAAKV,WAAL;AACI,aAAO,EACH,GAAGI,YADA;AAEHI,QAAAA,WAAW,EAAE;AAFV,OAAP;;AAIJ,SAAKN,mBAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHL,QAAAA,iBAAiB,EAAE;AAFhB,OAAP;;AAIJ,SAAKV,mBAAL;AACI,YAAM;AAAEa,QAAAA;AAAF,UAAoBG,MAAM,CAACG,OAAjC;AACA,aAAO,EACH,GAAGJ,KADA;AAEHL,QAAAA,iBAAiB,EAAE,KAFhB;AAGHG,QAAAA,aAAa,EAAEA;AAHZ,OAAP;;AAKJ,SAAKX,mBAAL;AACI,YAAM;AAAEU,QAAAA;AAAF,UAAkBI,MAAM,CAACG,OAA/B;AACA,aAAO,EACH,GAAGJ,KADA;AAEHL,QAAAA,iBAAiB,EAAE,KAFhB;AAGHE,QAAAA,WAAW,EAAEA;AAHV,OAAP;;AAMJ;AACI,aAAOG,KAAP;AAlER;AAoEH,CArED;;AAuEA,eAAeD,IAAf","sourcesContent":["import {\n    VERIFY_TOKEN_STARTED, VERIFY_TOKEN_END,\n    USER_LOGIN_STARTED, USER_LOGIN_FAILURE,\n    VERIFY_USER_SUCCESS, USER_LOGOUT, USER_SIGNUP_SUCCESS, USER_SIGNUP_STARTED, USER_SIGNUP_FAILURE,\n} from \"../actions/actionTypes\";\n\n// define initial state of auth reducer\nconst initialState = {\n    token: null, // manage the access token\n    expiredAt: null, // manage expiry time of the access token\n    user: null, // manage the user details\n    authLoading: true, // to indicate that the auth API is in progress\n    isAuthenticated: false, // consider as a authentication flag\n    userLoginLoading: false, // to indicate that the user signin API is in progress\n    userSignupLoading: false, //to indicate that the user signup API is in progress\n    loginError: null, // manage the error of the user signin API\n    signupError: null, //manage the error of the user signup API \n    signupSuccess: null //manage the scuccess message of the signup\n}\n\n// update store based on type and payload and return the state\nconst auth = (state = initialState, action) => {\n    switch (action.type) {\n        // verify token - started\n        case VERIFY_TOKEN_STARTED:\n            const { silentAuth } = action.payload;\n            return silentAuth ? {\n                ...state\n            } : initialState;\n        // verify token - ended/failed\n        case VERIFY_TOKEN_END:\n            return {\n                ...state,\n                authLoading: false\n            };\n        // user login - started\n        case USER_LOGIN_STARTED:\n            return {\n                ...state,\n                userLoginLoading: true\n            };\n        // user login - ended/failed\n        case USER_LOGIN_FAILURE:\n            const { error } = action.payload;\n            return {\n                ...state,\n                loginError: error,\n                userLoginLoading: false\n            };\n        // verify token - success\n        case VERIFY_USER_SUCCESS:\n            const { token, expiredAt, user } = action.payload;\n            return {\n                ...state,\n                token,\n                expiredAt,\n                user,\n                isAuthenticated: true,\n                authLoading: false,\n                userLoginLoading: false\n            }\n        // handle user logout\n        case USER_LOGOUT:\n            return {\n                ...initialState,\n                authLoading: false\n            }\n        case USER_SIGNUP_STARTED:\n            return {\n                ...state,\n                userSignupLoading: true\n            }\n        case USER_SIGNUP_SUCCESS:\n            const { signupSuccess } = action.payload;\n            return {\n                ...state,\n                userSignupLoading: false,\n                signupSuccess: signupSuccess\n            }\n        case USER_SIGNUP_FAILURE:\n            const { signupError } = action.payload;\n            return {\n                ...state,\n                userSignupLoading: false,\n                signupError: signupError\n            }\n\n        default:\n            return state\n    }\n}\n\nexport default auth;"]},"metadata":{},"sourceType":"module"}