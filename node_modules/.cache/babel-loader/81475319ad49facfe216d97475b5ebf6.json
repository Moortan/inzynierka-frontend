{"ast":null,"code":"import { verifyTokenStarted, verifyUserSuccess, verifyTokenEnd, userLoginStarted, userLoginFailure, userLogout, userSignupStarted, userSignupFailure, userSignupSuccess, addTeamStarted, addTeamFailure, addTeamSuccess } from \"../actions/authActions\";\nimport { verifyTokenService, userLoginService, userLogoutService, userSignupService } from '../services/auth';\nimport { addTeamService } from \"../services/teams\"; //handle verify token\n\nexport const verifyTokenAsync = (silentAuth = false) => async dispatch => {\n  dispatch(verifyTokenStarted(silentAuth));\n  const result = await verifyTokenService();\n\n  if (result.error) {\n    dispatch(verifyTokenEnd());\n    if (result.response && [401, 403].includes(result.response.status)) dispatch(userLogout());\n    return;\n  }\n\n  if (result.status === 204) dispatch(verifyTokenEnd());else {\n    dispatch(verifyUserSuccess(result.data));\n  }\n}; // handle user login\n\nexport const userLoginAsync = (username, password) => async dispatch => {\n  dispatch(userLoginStarted());\n  const result = await userLoginService(username, password);\n\n  if (result.error) {\n    dispatch(userLoginFailure(result.response.data));\n    return;\n  }\n\n  dispatch(verifyUserSuccess(result.data));\n}; // handle user logout\n\nexport const userLogoutAsync = () => dispatch => {\n  dispatch(userLogout());\n  userLogoutService();\n}; //handle user signup\n\nexport const userSignupAsync = (email, username, password) => async dispatch => {\n  dispatch(userSignupStarted());\n  const result = await userSignupService(email, username, password);\n\n  if (result.error) {\n    dispatch(userSignupFailure(result.response.data.message));\n    return;\n  }\n\n  dispatch(userSignupSuccess(result.response));\n}; //handle adding new team\n\nexport const addTeamAsync = (teamLeader, teamName, teamMembers, teamTag, game) => async dispatch => {\n  dispatch(addTeamStarted());\n  const result = await addTeamService(teamLeader, teamName, teamMembers, teamTag, game);\n  console.log(result);\n\n  if (result.error) {\n    dispatch(addTeamFailure(result.response.data.message));\n    return;\n  }\n\n  dispatch(addTeamSuccess(result.response));\n};","map":{"version":3,"sources":["/Users/sleniart/projects/react-front/src/asyncActions/authAsyncActions.js"],"names":["verifyTokenStarted","verifyUserSuccess","verifyTokenEnd","userLoginStarted","userLoginFailure","userLogout","userSignupStarted","userSignupFailure","userSignupSuccess","addTeamStarted","addTeamFailure","addTeamSuccess","verifyTokenService","userLoginService","userLogoutService","userSignupService","addTeamService","verifyTokenAsync","silentAuth","dispatch","result","error","response","includes","status","data","userLoginAsync","username","password","userLogoutAsync","userSignupAsync","email","message","addTeamAsync","teamLeader","teamName","teamMembers","teamTag","game","console","log"],"mappings":"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","sourcesContent":["import {\n    verifyTokenStarted, verifyUserSuccess, verifyTokenEnd,\n    userLoginStarted, userLoginFailure, userLogout, userSignupStarted, userSignupFailure, userSignupSuccess, addTeamStarted, addTeamFailure, addTeamSuccess\n} from \"../actions/authActions\";\nimport { verifyTokenService, userLoginService, userLogoutService, userSignupService } from '../services/auth';\nimport { addTeamService } from \"../services/teams\";\n\n//handle verify token\nexport const verifyTokenAsync = (silentAuth = false) => async dispatch => {\n    dispatch(verifyTokenStarted(silentAuth));\n\n    const result = await verifyTokenService();\n\n    if (result.error) {\n        dispatch(verifyTokenEnd());\n        if (result.response && [401, 403].includes(result.response.status))\n            dispatch(userLogout());\n        return;\n    }\n\n    if (result.status === 204)\n        dispatch(verifyTokenEnd());\n    else {\n        dispatch(verifyUserSuccess(result.data));\n    }\n}\n\n// handle user login\nexport const userLoginAsync = (username, password) => async dispatch => {\n    dispatch(userLoginStarted());\n\n    const result = await userLoginService(username, password);\n\n    if (result.error) {\n        dispatch(userLoginFailure(result.response.data));\n        return;\n    }\n\n    dispatch(verifyUserSuccess(result.data));\n}\n\n// handle user logout\nexport const userLogoutAsync = () => dispatch => {\n    dispatch(userLogout());\n    userLogoutService();\n}\n\n//handle user signup\nexport const userSignupAsync = (email, username, password) => async dispatch => {\n    dispatch(userSignupStarted());\n\n    const result = await userSignupService(email, username, password);\n\n    if(result.error) {\n        dispatch(userSignupFailure(result.response.data.message));\n        return;\n    }\n\n    dispatch(userSignupSuccess(result.response));\n}\n\n//handle adding new team\nexport const addTeamAsync = ( teamLeader, teamName, teamMembers, teamTag, game) => async dispatch => {\n    dispatch(addTeamStarted());\n\n    const result = await addTeamService( teamLeader, teamName, teamMembers, teamTag, game);\n\n    console.log(result);\n\n    if (result.error) {\n        dispatch(addTeamFailure(result.response.data.message));\n        return;\n    }\n\n    dispatch(addTeamSuccess(result.response));\n}\n"]},"metadata":{},"sourceType":"module"}